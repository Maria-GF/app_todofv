{"ast":null,"code":"import { defineStore } from 'pinia';\nimport supabase from '../supabase/index';\nexport default defineStore('tasks', {\n  state: () => ({\n    tasks: [],\n    newTask: null\n  }),\n  actions: {\n    async fetchTasks() {\n      const {\n        data: tasks\n      } = await supabase.from('tasks').select('*').order('id', {\n        ascending: false\n      });\n      this.tasks = tasks;\n    },\n\n    async addTask(title, userId) {\n      const {\n        data: newTask,\n        error\n      } = await supabase.from('tasks').insert([{\n        title,\n        user_id: userId\n      }]);\n      if (error) throw error;\n      this.tasks.unshift(newTask[0]);\n    },\n\n    async deleteTask(taskId) {\n      const {\n        error\n      } = await supabase.from('tasks').delete().match({\n        id: taskId\n      });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(task => task.id === taskId);\n\n      if (taskId !== -1) {\n        this.tasks.splice(taskIndex, 1);\n      }\n    },\n\n    async editTask(taskId, newTitle) {\n      const {\n        data,\n        error\n      } = await supabase.from('tasks').update({\n        title: newTitle\n      }).match({\n        id: taskId\n      });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(task => task.id === taskId);\n      this.tasks[taskIndex].title = data[0].title;\n    },\n\n    async markCompleted(taskId, taskComplete) {\n      const {\n        data,\n        error\n      } = await supabase.from('tasks').update({\n        is_complete: taskComplete\n      }).match({\n        id: taskId\n      });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(task => task.id === taskId);\n      this.tasks[taskIndex].is_complete = data[0].is_complete;\n    }\n\n  }\n});","map":{"version":3,"names":["defineStore","supabase","state","tasks","newTask","actions","fetchTasks","data","from","select","order","ascending","addTask","title","userId","error","insert","user_id","unshift","deleteTask","taskId","delete","match","id","taskIndex","findIndex","task","splice","editTask","newTitle","update","markCompleted","taskComplete","is_complete"],"sources":["/home/maria/maria/ironhack/apptodo/src/store/task.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport supabase from '../supabase/index';\n\nexport default defineStore('tasks', {\n  state: () => ({\n    tasks: [],\n    newTask: null,\n  }),\n  actions: {\n    async fetchTasks() {\n      const { data: tasks } = await supabase\n        .from('tasks')\n        .select('*')\n        .order('id', { ascending: false });\n      this.tasks = tasks;\n    },\n    async addTask(title, userId) {\n      const { data: newTask, error } = await supabase\n        .from('tasks')\n        .insert([{ title, user_id: userId }]);\n      if (error) throw error;\n      this.tasks.unshift(newTask[0]);\n    },\n    async deleteTask(taskId) {\n      const { error } = await supabase\n        .from('tasks')\n        .delete()\n        .match({ id: taskId });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(\n        (task) => task.id === taskId,\n      );\n      if (taskId !== -1) {\n        this.tasks.splice(taskIndex, 1);\n      }\n    },\n    async editTask(taskId, newTitle) {\n      const { data, error } = await supabase\n        .from('tasks')\n        .update({ title: newTitle })\n        .match({ id: taskId });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(\n        (task) => task.id === taskId,\n      );\n      this.tasks[taskIndex].title = data[0].title;\n    },\n    async markCompleted(taskId, taskComplete) {\n      const { data, error } = await supabase\n        .from('tasks')\n        .update({ is_complete: taskComplete })\n        .match({ id: taskId });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(\n        (task) => task.id === taskId,\n      );\n      this.tasks[taskIndex].is_complete = data[0].is_complete;\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}