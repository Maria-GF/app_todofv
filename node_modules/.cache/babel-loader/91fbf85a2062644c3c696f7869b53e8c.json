{"ast":null,"code":"import { mapState, mapActions } from 'pinia';\nimport taskStore from '@/store/task';\nimport userStore from '@/store/user';\nimport moment from 'moment';\nexport default {\n  name: 'HomeView',\n\n  data() {\n    return {\n      newTask: '',\n      editing: false,\n      newTitle: '',\n      msg: ''\n    };\n  },\n\n  computed: { ...mapState(taskStore, ['tasks']),\n    ...mapState(userStore, ['user'])\n  },\n\n  created() {\n    this.fetchTasks();\n  },\n\n  methods: { ...mapActions(taskStore, ['addTask', 'fetchTasks', 'editTask', 'deleteTask', 'markCompleted']),\n    ...mapActions(userStore, ['signOut']),\n\n    async handleSignOut() {\n      try {\n        await this.signOut();\n        this.$router.push({\n          path: '/auth'\n        });\n      } catch (error) {\n        this.msg = 'An error has occured';\n      }\n    },\n\n    handleAddTask() {\n      this.addTask(this.newTask, this.user.id);\n      this.newTask = '';\n    },\n\n    edit(taskId) {\n      this.editing = taskId;\n    },\n\n    doneEdit(taskId) {\n      this.editTask(taskId, this.newTitle);\n      this.editing = false;\n      this.newTitle = '';\n    },\n\n    handleComplete(taskId, taskComplete) {\n      this.markCompleted(taskId, taskComplete);\n    },\n\n    handleDelete(taskId) {\n      this.deleteTask(taskId);\n    },\n\n    formatDate(date) {\n      return moment(date).format('DD/MM/yyyy');\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAgGA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe;EACbC,IAAI,EAAE,UADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,OAAO,EAAE,EADJ;MAELC,OAAO,EAAE,KAFJ;MAGLC,QAAQ,EAAE,EAHL;MAILC,GAAG,EAAE;IAJA,CAAP;EAMD,CATY;;EAWbC,QAAQ,EAAE,EACR,GAAGX,QAAQ,CAACE,SAAD,EAAY,CAAC,OAAD,CAAZ,CADH;IAER,GAAGF,QAAQ,CAACG,SAAD,EAAY,CAAC,MAAD,CAAZ;EAFH,CAXG;;EAebS,OAAO,GAAG;IACR,KAAKC,UAAL;EACD,CAjBY;;EAkBbC,OAAO,EAAE,EACP,GAAGb,UAAU,CAACC,SAAD,EAAY,CACvB,SADuB,EAEvB,YAFuB,EAGvB,UAHuB,EAIvB,YAJuB,EAKvB,eALuB,CAAZ,CADN;IAQP,GAAGD,UAAU,CAACE,SAAD,EAAY,CAAC,SAAD,CAAZ,CARN;;IASP,MAAMY,aAAN,GAAsB;MACpB,IAAI;QACF,MAAM,KAAKC,OAAL,EAAN;QACA,KAAKC,OAAL,CAAaC,IAAb,CAAkB;UAAEC,IAAI,EAAE;QAAR,CAAlB;MACF,CAHA,CAGE,OAAOC,KAAP,EAAc;QACd,KAAKV,GAAL,GAAW,sBAAX;MACF;IACD,CAhBM;;IAiBPW,aAAa,GAAG;MACd,KAAKC,OAAL,CAAa,KAAKf,OAAlB,EAA2B,KAAKgB,IAAL,CAAUC,EAArC;MACA,KAAKjB,OAAL,GAAe,EAAf;IACD,CApBM;;IAqBPkB,IAAI,CAACC,MAAD,EAAS;MACX,KAAKlB,OAAL,GAAekB,MAAf;IACD,CAvBM;;IAwBPC,QAAQ,CAACD,MAAD,EAAS;MACf,KAAKE,QAAL,CAAcF,MAAd,EAAsB,KAAKjB,QAA3B;MACA,KAAKD,OAAL,GAAe,KAAf;MACA,KAAKC,QAAL,GAAgB,EAAhB;IACD,CA5BM;;IA6BPoB,cAAc,CAACH,MAAD,EAASI,YAAT,EAAuB;MACnC,KAAKC,aAAL,CAAmBL,MAAnB,EAA2BI,YAA3B;IACD,CA/BM;;IAgCPE,YAAY,CAACN,MAAD,EAAS;MACnB,KAAKO,UAAL,CAAgBP,MAAhB;IACD,CAlCM;;IAmCPQ,UAAU,CAACC,IAAD,EAAO;MACf,OAAO/B,MAAM,CAAC+B,IAAD,CAAN,CAAaC,MAAb,CAAoB,YAApB,CAAP;IACD;;EArCM;AAlBI,CAAf","names":["mapState","mapActions","taskStore","userStore","moment","name","data","newTask","editing","newTitle","msg","computed","created","fetchTasks","methods","handleSignOut","signOut","$router","push","path","error","handleAddTask","addTask","user","id","edit","taskId","doneEdit","editTask","handleComplete","taskComplete","markCompleted","handleDelete","deleteTask","formatDate","date","format"],"sourceRoot":"","sources":["/home/maria/maria/ironhack/app-todo-new/new-todo-project/todolist/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <section class='vh-100' style='background-color: #9a616d'>\n    <div class='container py-5 h-100'>\n      <div class='row d-flex justify-content-center align-items-center h-100'>\n        <div class='col col-xl-10'>\n          <div class='card homecard' style='border-radius: 1rem'>\n                <div class='card-body p-4 p-lg-5 text-black'>\n                  <div class='home'>\n                    <h1>Wh</h1>\n                    <article>\n                      <label for='newtask'>\n                        <input\n                          class='form-control form-control'\n                          placeholder='destination'\n                          type='text'\n                          v-model='newTask'\n                        />\n                      </label>\n                      <button class='btn btn-secondary' @click='handleAddTask'>\n                        Add\n                      </button>\n                    </article>\n                    <table class='tasktable'>\n                      <tr>\n                        <th>Where</th>\n                        <th>Add date</th>\n                        <th>Done(âœ“)</th>\n                        <th>What to do</th>\n                      </tr>\n                      <tr v-for='task in tasks' :key='task.id'>\n                        <td>\n                          <span v-show='editing !== task.id'>{{\n                            task.title\n                          }}</span>\n                          <label for='newTitle'>\n                            <input\n                              @keyup.enter='doneEdit(task.id)'\n                              v-model='newTitle'\n                              v-show='editing === task.id'\n                              :placeholder='task.title'\n                            />\n                          </label>\n                        </td>\n                        <td>{{ formatDate(task.inserted_at) }}</td>\n                        <td>\n                          <label for='taskStatus'>\n                            <input\n                              @click='\n                                handleComplete(task.id, !task.is_complete)\n                              '\n                              name='taskStatus'\n                              type='checkbox'\n                              v-model='task.is_complete'\n                            />\n                          </label>\n                        </td>\n                        <td>\n                          <button\n                            class='btn btn-light btn-sm'\n                            v-show='editing !== task.id'\n                            @click='edit(task.id)'\n                          >\n                            Edit\n                          </button>\n                          <button\n                            class='btn btn-secondary btn-sm'\n                            v-show='editing === task.id'\n                            @click='doneEdit(task.id)'\n                          >\n                            Save\n                          </button>\n                          <button\n                            class='btn btn-light btn-sm del'\n                            @click='handleDelete(task.id)'\n                          >\n                            X\n                          </button>\n                        </td>\n                      </tr>\n                    </table>\n                    <button\n                      class='btn btn-light btn-sm signout'\n                      @click='handleSignOut'\n                    >\n                      Sign Out\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n  </section>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'pinia';\nimport taskStore from '@/store/task';\nimport userStore from '@/store/user';\nimport moment from 'moment';\n\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      newTask: '',\n      editing: false,\n      newTitle: '',\n      msg: '',\n    };\n  },\n\n  computed: {\n    ...mapState(taskStore, ['tasks']),\n    ...mapState(userStore, ['user']),\n  },\n  created() {\n    this.fetchTasks();\n  },\n  methods: {\n    ...mapActions(taskStore, [\n      'addTask',\n      'fetchTasks',\n      'editTask',\n      'deleteTask',\n      'markCompleted',\n    ]),\n    ...mapActions(userStore, ['signOut']),\n    async handleSignOut() {\n      try {\n        await this.signOut();\n        this.$router.push({ path: '/auth' });\n      } catch (error) {\n        this.msg = 'An error has occured';\n      }\n    },\n    handleAddTask() {\n      this.addTask(this.newTask, this.user.id);\n      this.newTask = '';\n    },\n    edit(taskId) {\n      this.editing = taskId;\n    },\n    doneEdit(taskId) {\n      this.editTask(taskId, this.newTitle);\n      this.editing = false;\n      this.newTitle = '';\n    },\n    handleComplete(taskId, taskComplete) {\n      this.markCompleted(taskId, taskComplete);\n    },\n    handleDelete(taskId) {\n      this.deleteTask(taskId);\n    },\n    formatDate(date) {\n      return moment(date).format('DD/MM/yyyy');\n    },\n  },\n};\n</script>\n<style>\n.tasktable {\n  width: 80%;\n  margin-top: 40px;\n}\n.home {\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n}\n.signout {\n  position:relative;\n  top: 1pc;\n}\nh1 {\n  margin-bottom: 50px;\n}\n.btn-secondary {\n  margin-left: 20px;\n  background-color: #9a616d;\n  border:#9a616d;\n}\n.del {\n  color: red;\n}\n@media (max-width: 768px) {\n   .tasktable {\n     font-size: 14px;\n     width: 110%;\n   }\n   .btn-sm {\n    font-size: 10px;\n   }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}