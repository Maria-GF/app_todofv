{"ast":null,"code":"import _regeneratorRuntime from \"/home/maria/maria/app_todofv/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/maria/maria/app_todofv/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { defineStore } from 'pinia';\nimport supabase from '../supabase/index';\nexport default defineStore('tasks', {\n  state: function state() {\n    return {\n      tasks: [],\n      newTask: null\n    };\n  },\n  actions: {\n    fetchTasks: function fetchTasks() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$supabase$from$, tasks;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return supabase.from('tasks').select('*').order('id', {\n                  ascending: false\n                });\n\n              case 2:\n                _yield$supabase$from$ = _context.sent;\n                tasks = _yield$supabase$from$.data;\n                _this.tasks = tasks;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    addTask: function addTask(title, userId) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$supabase$from$2, newTask, error;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return supabase.from('tasks').insert([{\n                  title: title,\n                  user_id: userId\n                }]);\n\n              case 2:\n                _yield$supabase$from$2 = _context2.sent;\n                newTask = _yield$supabase$from$2.data;\n                error = _yield$supabase$from$2.error;\n\n                if (!error) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw error;\n\n              case 7:\n                _this2.tasks.unshift(newTask[0]);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    deleteTask: function deleteTask(taskId) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _yield$supabase$from$3, error, taskIndex;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return supabase.from('tasks')[\"delete\"]().match({\n                  id: taskId\n                });\n\n              case 2:\n                _yield$supabase$from$3 = _context3.sent;\n                error = _yield$supabase$from$3.error;\n\n                if (!error) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw error;\n\n              case 6:\n                taskIndex = _this3.tasks.findIndex(function (task) {\n                  return task.id === taskId;\n                });\n\n                if (taskId !== -1) {\n                  _this3.tasks.splice(taskIndex, 1);\n                }\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    editTask: function editTask(taskId, newTitle) {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$supabase$from$4, data, error, taskIndex;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return supabase.from('tasks').update({\n                  title: newTitle\n                }).match({\n                  id: taskId\n                });\n\n              case 2:\n                _yield$supabase$from$4 = _context4.sent;\n                data = _yield$supabase$from$4.data;\n                error = _yield$supabase$from$4.error;\n\n                if (!error) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw error;\n\n              case 7:\n                taskIndex = _this4.tasks.findIndex(function (task) {\n                  return task.id === taskId;\n                });\n                _this4.tasks[taskIndex].title = data[0].title;\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    markCompleted: function markCompleted(taskId, taskComplete) {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _yield$supabase$from$5, data, error, taskIndex;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return supabase.from('tasks').update({\n                  is_complete: taskComplete\n                }).match({\n                  id: taskId\n                });\n\n              case 2:\n                _yield$supabase$from$5 = _context5.sent;\n                data = _yield$supabase$from$5.data;\n                error = _yield$supabase$from$5.error;\n\n                if (!error) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                throw error;\n\n              case 7:\n                taskIndex = _this5.tasks.findIndex(function (task) {\n                  return task.id === taskId;\n                });\n                _this5.tasks[taskIndex].is_complete = data[0].is_complete;\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    }\n  }\n});","map":{"version":3,"names":["defineStore","supabase","state","tasks","newTask","actions","fetchTasks","from","select","order","ascending","data","addTask","title","userId","insert","user_id","error","unshift","deleteTask","taskId","match","id","taskIndex","findIndex","task","splice","editTask","newTitle","update","markCompleted","taskComplete","is_complete"],"sources":["/home/maria/maria/app_todofv/src/store/task.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport supabase from '../supabase/index';\n\nexport default defineStore('tasks', {\n  state: () => ({\n    tasks: [],\n    newTask: null,\n  }),\n  actions: {\n    async fetchTasks() {\n      const { data: tasks } = await supabase\n        .from('tasks')\n        .select('*')\n        .order('id', { ascending: false });\n      this.tasks = tasks;\n    },\n    async addTask(title, userId) {\n      const { data: newTask, error } = await supabase\n        .from('tasks')\n        .insert([{ title, user_id: userId }]);\n      if (error) throw error;\n      this.tasks.unshift(newTask[0]);\n    },\n    async deleteTask(taskId) {\n      const { error } = await supabase\n        .from('tasks')\n        .delete()\n        .match({ id: taskId });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(\n        (task) => task.id === taskId,\n      );\n      if (taskId !== -1) {\n        this.tasks.splice(taskIndex, 1);\n      }\n    },\n    async editTask(taskId, newTitle) {\n      const { data, error } = await supabase\n        .from('tasks')\n        .update({ title: newTitle })\n        .match({ id: taskId });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(\n        (task) => task.id === taskId,\n      );\n      this.tasks[taskIndex].title = data[0].title;\n    },\n    async markCompleted(taskId, taskComplete) {\n      const { data, error } = await supabase\n        .from('tasks')\n        .update({ is_complete: taskComplete })\n        .match({ id: taskId });\n      if (error) throw error;\n      const taskIndex = this.tasks.findIndex(\n        (task) => task.id === taskId,\n      );\n      this.tasks[taskIndex].is_complete = data[0].is_complete;\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}