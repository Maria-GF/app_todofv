{"ast":null,"code":"import { mapState, mapActions } from 'pinia';\nimport userStore from '@/store/user';\nexport default {\n  name: 'SignUp',\n\n  data() {\n    return {\n      newUserPassword: '',\n      newUserEmail: '',\n      confirmPassword: '',\n      message: ''\n    };\n  },\n\n  computed: { ...mapState(userStore, ['user', 'errorMsg'])\n  },\n\n  created() {\n    this.fetchUser();\n  },\n\n  methods: { ...mapActions(userStore, ['signUp', 'fetchUser']),\n\n    validateEmail(value) {\n      if (/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\n        this.message = 'Please,create a password!';\n      } else {\n        this.message = 'Please, enter a valid email!';\n      }\n    },\n\n    validatePassword(value) {\n      const difference = 6 - value.length;\n\n      if (value.length < 6) {\n        this.message = `The password must have at least 6 characters! + ${difference} + characters left`;\n      } else {\n        this.message = '';\n      }\n    },\n\n    async handleSignUp() {\n      if (!this.newUserEmail) {\n        this.message = 'Email required';\n      } else if (this.confirmPassword === this.newUserPassword) {\n        try {\n          await this.signUp(this.newUserEmail, this.newUserPassword);\n        } catch (error) {\n          this.message = 'User already registered. Please, sign in!';\n        }\n      } else {\n        this.message = 'Oops!Try again!The passwords do not match!';\n      }\n    }\n\n  },\n  watch: {\n    user() {\n      if (this.user) {\n        this.$router.push({\n          path: '/'\n        });\n      }\n    },\n\n    newUserEmail(value) {\n      // binding this to the data value in the email input\n      this.newUserEmail = value;\n      this.validateEmail(value);\n    },\n\n    newUserPassword(value) {\n      this.newUserPassword = value;\n      this.validatePassword(value);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAmFA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,eAAe;EACbC,IAAI,EAAE,QADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,eAAe,EAAE,EADZ;MAELC,YAAY,EAAE,EAFT;MAGLC,eAAe,EAAE,EAHZ;MAILC,OAAO,EAAE;IAJJ,CAAP;EAMD,CATY;;EAUbC,QAAQ,EAAE,EACR,GAAGT,QAAQ,CAACE,SAAD,EAAY,CAAC,MAAD,EAAS,UAAT,CAAZ;EADH,CAVG;;EAabQ,OAAO,GAAG;IACR,KAAKC,SAAL;EACD,CAfY;;EAgBbC,OAAO,EAAE,EACP,GAAGX,UAAU,CAACC,SAAD,EAAY,CAAC,QAAD,EAAW,WAAX,CAAZ,CADN;;IAEPW,aAAa,CAACC,KAAD,EAAQ;MACnB,IAAI,8CAA8CC,IAA9C,CAAmDD,KAAnD,CAAJ,EAA+D;QAC7D,KAAKN,OAAL,GAAe,2BAAf;MACF,CAFA,MAEO;QACL,KAAKA,OAAL,GAAe,8BAAf;MACF;IACD,CARM;;IASPQ,gBAAgB,CAACF,KAAD,EAAQ;MACtB,MAAMG,UAAS,GAAI,IAAIH,KAAK,CAACI,MAA7B;;MACA,IAAIJ,KAAK,CAACI,MAAN,GAAe,CAAnB,EAAsB;QACpB,KAAKV,OAAL,GAAgB,mDAAkDS,UAAU,oBAA5E;MACF,CAFA,MAEO;QACL,KAAKT,OAAL,GAAe,EAAf;MACF;IACD,CAhBM;;IAiBP,MAAMW,YAAN,GAAqB;MACnB,IAAI,CAAC,KAAKb,YAAV,EAAwB;QACtB,KAAKE,OAAL,GAAe,gBAAf;MACF,CAFA,MAEO,IAAI,KAAKD,eAAL,KAAyB,KAAKF,eAAlC,EAAmD;QACxD,IAAI;UACF,MAAM,KAAKe,MAAL,CAAY,KAAKd,YAAjB,EAA+B,KAAKD,eAApC,CAAN;QACF,CAFA,CAEE,OAAOgB,KAAP,EAAc;UACd,KAAKb,OAAL,GAAe,2CAAf;QACF;MACF,CANO,MAMA;QACL,KAAKA,OAAL,GAAe,4CAAf;MACF;IACD;;EA7BM,CAhBI;EA+Cbc,KAAK,EAAE;IACLC,IAAI,GAAG;MACL,IAAI,KAAKA,IAAT,EAAe;QACb,KAAKC,OAAL,CAAaC,IAAb,CAAkB;UAAEC,IAAI,EAAE;QAAR,CAAlB;MACF;IACD,CALI;;IAMLpB,YAAY,CAACQ,KAAD,EAAQ;MAClB;MACA,KAAKR,YAAL,GAAoBQ,KAApB;MACA,KAAKD,aAAL,CAAmBC,KAAnB;IACD,CAVI;;IAWLT,eAAe,CAACS,KAAD,EAAQ;MACrB,KAAKT,eAAL,GAAuBS,KAAvB;MACA,KAAKE,gBAAL,CAAsBF,KAAtB;IACD;;EAdI;AA/CM,CAAf","names":["mapState","mapActions","userStore","name","data","newUserPassword","newUserEmail","confirmPassword","message","computed","created","fetchUser","methods","validateEmail","value","test","validatePassword","difference","length","handleSignUp","signUp","error","watch","user","$router","push","path"],"sourceRoot":"","sources":["/home/maria/maria/ironhack/app-todo-new/new-todo-project/todolist/src/components/SignUp.vue"],"sourcesContent":["<template>\n  <section class='vh-100' style='background-color: #DFF1ED'>\n    <div class='container py-5 h-100'>\n      <div class='row d-flex justify-content-center align-items-center h-100'>\n        <div class='col col-xl-10'>\n          <div class='cardauth' style='border-radius: 1rem'>\n            <div class='row g-0'>\n              <div class='col-md-6 col-lg-5 d-none d-md-block authimg2'></div>\n              <div class='col-md-6 col-lg-7 d-flex align-items-center'>\n                <div class='card-body p-4 p-lg-5 text-black'>\n                  <form>\n                    <div class='d-flex align-items-center mb-3 pb-1'>\n                      <span class='h1 fw mb-0'\n                        >Create a new account</span\n                      >\n                    </div>\n                    <div class='form-outline mb-4'>\n                      <label class='form-label' for='new-email'\n                        >Your email address\n                        <input\n                          type='email'\n                          id='new-email'\n                          class='form-control form-control-lg'\n                          v-model='newUserEmail'\n                          placeholder='example@gmail.com'\n                          required\n                        />\n                      </label>\n                    </div>\n\n                    <div class='form-outline mb-4'>\n                      <label class='form-label' for='new-password'\n                        >Create password\n                        <input\n                          type='password'\n                          id='new-password'\n                          class='form-control form-control-lg'\n                          v-model='newUserPassword'\n                          placeholder='new password'\n                          required\n                        />\n                      </label>\n                    </div>\n\n                    <div class='form-outline mb-4'>\n                      <label class='form-label' for='confirm-password'\n                        >Confirm password\n                        <input\n                          type='password'\n                          id='confirm-password'\n                          class='form-control form-control-lg'\n                          v-model='confirmPassword'\n                          placeholder='confirm password'\n                        />\n                      </label>\n                    </div>\n                    <div class='msg'>{{ message }}</div>\n\n                    <div class='pt-1 mb-4'>\n                      <button\n                        @click.prevent='handleSignUp'\n                        class='btn btn-dark btn-lg btn-block'\n                        type='button'\n                      >\n                        Sign up\n                      </button>\n                    </div>\n                  </form>\n                  <button class='btn btn-light btn-sm signout'>\n                    <router-link class='link-secondary' to='/auth'\n                      >Go Back</router-link\n                    >\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n<script>\nimport { mapState, mapActions } from 'pinia';\nimport userStore from '@/store/user';\n\nexport default {\n  name: 'SignUp',\n  data() {\n    return {\n      newUserPassword: '',\n      newUserEmail: '',\n      confirmPassword: '',\n      message: '',\n    };\n  },\n  computed: {\n    ...mapState(userStore, ['user', 'errorMsg']),\n  },\n  created() {\n    this.fetchUser();\n  },\n  methods: {\n    ...mapActions(userStore, ['signUp', 'fetchUser']),\n    validateEmail(value) {\n      if (/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\n        this.message = 'Please,create a password!';\n      } else {\n        this.message = 'Please, enter a valid email!';\n      }\n    },\n    validatePassword(value) {\n      const difference = 6 - value.length;\n      if (value.length < 6) {\n        this.message = `The password must have at least 6 characters! + ${difference} + characters left`;\n      } else {\n        this.message = '';\n      }\n    },\n    async handleSignUp() {\n      if (!this.newUserEmail) {\n        this.message = 'Email required';\n      } else if (this.confirmPassword === this.newUserPassword) {\n        try {\n          await this.signUp(this.newUserEmail, this.newUserPassword);\n        } catch (error) {\n          this.message = 'User already registered. Please, sign in!';\n        }\n      } else {\n        this.message = 'Oops!Try again!The passwords do not match!';\n      }\n    },\n  },\n  watch: {\n    user() {\n      if (this.user) {\n        this.$router.push({ path: '/' });\n      }\n    },\n    newUserEmail(value) {\n      // binding this to the data value in the email input\n      this.newUserEmail = value;\n      this.validateEmail(value);\n    },\n    newUserPassword(value) {\n      this.newUserPassword = value;\n      this.validatePassword(value);\n    },\n  },\n};\n</script>\n<style>\n.authimg2 {\n  background-image: url('https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/img1.webp');\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 1rem 0 0 1rem;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}